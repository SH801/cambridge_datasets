<?php
// vi: tabstop=8 shiftwidth=8 bs=2

// This module handles importing of Cambridge University datasets 
// and processing of dataset requests generated by internal/external users
//
// Copyright (c) 2019, haselwimmer@gmail.com
//
// $Id: index.php v2.1a 2019/07/013 09:00:00 sh801 
//
// Version 1.0a

include_once 'cambridge_datasets.features.inc';

//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  Hooks and Setup Functions
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|

function cambridge_datasets_menu() 
{
	// Setup all menu items for module via hook_menu()
	
	$items['cambridge_datasets'] = 		[
											'title' => '',
											'description' => 'Home page',
											'access callback' => TRUE,
											'page callback' => 'cambridge_datasets_default_pagecallback',
											'type' => MENU_NORMAL_ITEM,
										];	  

	$items['cambridge_datasets/request'] = [
											'title' => 'Request access to dataset',
											'description' => 'Request access to dataset.',
											'access callback' => TRUE,
											'page callback' => 'cambridge_datasets_request_pagecallback',
											'type' => MENU_NORMAL_ITEM,
										];	  

	$items['cambridge_datasets/updatereview'] = [
											'title' => 'Update review',
											'description' => 'Update review.',
											'access callback' => 'cambridge_datasets_user_has_role',
											'access arguments' => ['reviewer', 'finalreviewer', 'administrator'],
											'page callback' => 'cambridge_datasets_updatereview_pagecallback',
											'type' => MENU_NORMAL_ITEM,
										];	  

	$items['cambridge_datasets/requestrevert'] = [
											'title' => 'Revert request',
											'description' => 'Revert request.',
											'access callback' => 'cambridge_datasets_user_has_role',
											'access arguments' => ['finalreviewer', 'administrator'],
											'page callback' => 'cambridge_datasets_requeststatus_pagecallback',
											'page arguments' => ['revert'],
											'type' => MENU_NORMAL_ITEM,
										];	  

	$items['cambridge_datasets/requestreject'] = [
											'title' => 'Reject request',
											'description' => 'Reject request.',
											'access callback' => 'cambridge_datasets_user_has_role',
											'access arguments' => ['finalreviewer', 'administrator'],
											'page callback' => 'cambridge_datasets_requeststatus_pagecallback',
											'page arguments' => ['reject'],
											'type' => MENU_NORMAL_ITEM,
										];	  

	$items['cambridge_datasets/requestapprove'] = [
											'title' => 'Approve request',
											'description' => 'Approve request.',
											'access callback' => 'cambridge_datasets_user_has_role',
											'access arguments' => ['finalreviewer', 'administrator'],
											'page callback' => 'cambridge_datasets_requeststatus_pagecallback',
											'page arguments' => ['approve'],
											'type' => MENU_NORMAL_ITEM,
										];	  

	$items['cambridge_datasets/requestprocessed'] = [
											'title' => 'Request processed',
											'description' => 'Request processed.',
											'access callback' => 'cambridge_datasets_user_has_role',
											'access arguments' => ['finalreviewer', 'administrator'],
											'page callback' => 'cambridge_datasets_requeststatus_pagecallback',
											'page arguments' => ['processed'],
											'type' => MENU_NORMAL_ITEM,
										];	  
										
	$items['cambridge_datasets/import'] = [
											'title' => 'Import Dataset Collection',
											'description' => 'Import content from a <abbr title="Comma Separated Values">CSV</abbr> file.',
											'access callback' => 'cambridge_datasets_user_has_role',
											'access arguments' => ['administrator'],
											'page callback' => 'cambridge_datasets_import_pagecallback',
											'type' => MENU_NORMAL_ITEM,
										];	  

	$items['cambridge_datasets/processmessagequeue'] = 
										[
											'title' => 'Process email queue',
											'description' => 'Process email queue.',
											'access callback' => TRUE,
											'page callback' => 'cambridge_datasets_mail_messagequeue_process',
											'type' => MENU_NORMAL_ITEM,
										];	  

	$items['cambridge_datasets/testemail'] = 
										[
											'title' => 'Send test email',
											'description' => 'Send test email.',
											'access callback' => 'cambridge_datasets_user_has_role',
											'access arguments' => ['administrator'],
											'page callback' => 'cambridge_datasets_mail_testemail',
											'type' => MENU_NORMAL_ITEM,
										];	  

	$items['cambridge_datasets/addtestmessagequeue'] = 
										[
											'title' => 'Add test message to queue',
											'description' => 'Add test message to queue.',
											'access callback' => 'cambridge_datasets_user_has_role',
											'access arguments' => ['administrator'],
											'page callback' => 'cambridge_datasets_mail_messagequeue_addtest',
											'type' => MENU_NORMAL_ITEM,
										];	  

	$items['admin/settings/cambridge_datasets'] = 	[
											'title' => 'Cambridge Datasets Module Settings',
											'description' => 'Settings for the Cambridge Datasets module',
											'page callback' => 'drupal_get_form',
											'page arguments' => array('cambridge_datasets_admin'),
											'access arguments' => array('administer cambridge_datasets settings'),
											'type' => MENU_NORMAL_ITEM
										];
										
	return $items ;
}
	  
function cambridge_datasets_user_login(&$edit, $account) 
{
	// Action to perform after user has logged in 
	// If reviewer, redirect to 'requests' review page (pending requests)
	// Anyone else, go to home

	$user = user_load($account->uid);

	if (in_array('reviewer', $user->roles))
	{
		$edit['redirect'] = 'requests';
	}
	else
	{
		$edit['redirect'] = 'cambridge_datasets';
	}
}

function cambridge_datasets_user_has_role()
{
	// Check whether user has role and return boolean accordingly

	global $user;
	$roles = func_get_args();
	foreach ($roles as $role) 
	{
		if (in_array($role, $user->roles)) return TRUE;
	}
	return FALSE; 	
}

function cambridge_datasets_permission() 
{
	// Implements hook_permission().
	
	return ['access cambridge_datasets content' => ['title' => t('Access University of Cambridge Datasets system')]];
}
  
function cambridge_datasets_admin() 
{
	// Define module configuration page
	
	$form = [];

	$form['cambridge_datasets_datastore_path'] = 	[
													'#type' => 'textfield',
													'#title' => t('Datastore Path'),
													'#default_value' => variable_get('cambridge_datasets_datastore_path', ""),
													'#size' => 100,
													'#maxlength' => 1000,
													'#description' => t("Path to a folder where data, eg. saved requests, will be stored"),
													'#required' => TRUE
												];

	$form['cambridge_datasets_access_datasets_url'] = 	[
													'#type' => 'textfield',
													'#title' => t('Datasets Access Website Address'),
													'#default_value' => variable_get('cambridge_datasets_access_datasets_url', ""),
													'#size' => 100,
													'#maxlength' => 1000,
													'#description' => t("Internet address where approved applicants will be able to download their datasets from"),
													'#required' => TRUE
												];
												
	return system_settings_form($form);
}

function cambridge_datasets_entity_delete($entity, $type) 
{
	// Delete related entities when collection deleted

	if (!isset($entity->type)) return;

	if ($entity->type == "collection")
	{
		// Get all related 'dataset' objects 
		
		$datasets_nids = [];
		if (isset($entity->field_datasets[LANGUAGE_NONE]))
		{
			foreach($entity->field_datasets[LANGUAGE_NONE] as $key => $value)
			{
				$field_collection_node = entity_load('field_collection_item', array($value['value']));
				$field_collection_node = array_shift($field_collection_node);
				array_push($datasets_nids, $field_collection_node->field_dataset[LANGUAGE_NONE][0]['target_id']);
			}
			node_delete_multiple($datasets_nids);
		}	
	}
}

//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  End hooks and setup functions
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|

//-------------------------------------------------------------------------------------------|
//  Page callback functions
//-------------------------------------------------------------------------------------------|

function cambridge_datasets_default_pagecallback()
{
	// Default information page for module			
	
	$email_contact = variable_get('site_mail', '');
	$module_path = drupal_get_path('module', 'cambridge_datasets');
	$output = '<div class="campl-content-container"><h1>Welcome to the Cambridge University Dataset Portal</h1>
	<p style="max-width:640px;">This system provides an overview of datasets within the University of Cambridge that are accessible to external researchers. 
	You can request access to any dataset by filling in a simple web form.</p>
	<p>In the event of problems, please email the site administrator at <a href="mailto:'.$email_contact.'">'.$email_contact.'</a><br/><br/></p>
	<p><a href="collections"><button type="button">View Dataset Collections >></button></a></p>
	';
	$output .= '</div>';

	return $output;
}

function cambridge_datasets_request_pagecallback() 
{
	// Page for creating dataset request

	return drupal_get_form('cambridge_datasets_form_request_terms');
}

function cambridge_datasets_import_pagecallback()
{
	// Page for importing collection of datasets

	$module_path = drupal_get_path('module', 'cambridge_datasets');
	$form = drupal_get_form('cambridge_datasets_form_import');

	$output = '<div class="campl-content-container"><p>Import a list of datasets from a CSV file. </p><p>Ensure the file is comma-separated and not tab-separated - if necessary open in Excel and do <i>Save as</i>';
	$output .= drupal_render($form);
	$output .= '</div>';
	
	return $output;
}

function cambridge_datasets_updatereview_pagecallback()
{
	// Add/Update review

	global $user;
	$reviewer = $finalreviewer = false;

	// Check whether user has sufficient role to comment on anything

	if (in_array('reviewer', $user->roles)) $reviewer = true;
	if (in_array('finalreviewer', $user->roles)) $finalreviewer = true;
	if (in_array('administrator', $user->roles)) $finalreviewer = true;

	if ((!$reviewer) && (!$finalreviewer)) drupal_goto($_SERVER["HTTP_REFERER"]);

	// Check whether user can comment on this request

	$request_nid = $_POST['request_nid'];
	$request_node = node_load($request_nid);
	if (!$request_node) drupal_goto($_SERVER["HTTP_REFERER"]);

	$reviewers_nids = [];
	if (isset($request_node->field_reviewers[LANGUAGE_NONE]))
	{
		foreach($request_node->field_reviewers[LANGUAGE_NONE] as $key => $value)
		{
			$field_collection_node = entity_load('field_collection_item', array($value['value']));
			$field_collection_node = array_shift($field_collection_node);
			array_push($reviewers_nids, $field_collection_node->field_reviewer[LANGUAGE_NONE][0]['target_id']);
		}
	}

	if (!in_array($user->uid, $reviewers_nids)) drupal_goto($_SERVER["HTTP_REFERER"]);

	// User has sufficient access, delete their existing comment if any

	$reviews = field_get_items('node', $request_node, 'field_reviews');
	if ($reviews) 
	{
		foreach($reviews as $review)
		{
			$fc = field_collection_field_get_entity($review);
			$reviewer_nid = $fc->field_reviewer[LANGUAGE_NONE][0]['target_id'];
			if (!$reviewer_nid) continue;
			if ($reviewer_nid != $user->uid) continue;
			entity_delete('field_collection_item', $fc->item_id);
		}
	}

	// Create new review by user

	$decision = $_POST['decision'];
	$comment = $_POST['comment'];
	$field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_reviews')); 
	$field_collection_item->setHostEntity('node', $request_node); 
	$field_collection_item->field_decision[LANGUAGE_NONE][0]['value'] = $decision; 
	$field_collection_item->field_comment[LANGUAGE_NONE][0]['value'] = $comment; 
	$field_collection_item->field_reviewer[LANGUAGE_NONE][0]['target_id'] = $user->uid; 
	$field_collection_item->save(TRUE); 

	node_save($request_node); 	

	drupal_goto($_SERVER["HTTP_REFERER"]);
}

function cambridge_datasets_requeststatus_pagecallback()
{
	// Modifies status of 'request' object

	// Status at which we enable access

	$enableaccess_status = 'approve';

	global $user;
	$finalreviewer = false;

	// Check whether user has sufficient role to change status of request

	if (in_array('finalreviewer', $user->roles)) $finalreviewer = true;
	if (in_array('administrator', $user->roles)) $finalreviewer = true;

	if (!$finalreviewer) drupal_goto($_SERVER["HTTP_REFERER"]);

	$status = func_get_args();
	if (isset($_GET['request_nid']))
	{
		$status = $status[0];
		$request_nid = $_GET['request_nid'];
		$request_node = node_load($request_nid);

		// Check whether user can review this request

		if (!$request_node) drupal_goto($_SERVER["HTTP_REFERER"]);

		$reviewers_nids = [];
		if (isset($request_node->field_reviewers[LANGUAGE_NONE]))
		{
			foreach($request_node->field_reviewers[LANGUAGE_NONE] as $key => $value)
			{
				$field_collection_node = entity_load('field_collection_item', array($value['value']));
				$field_collection_node = array_shift($field_collection_node);
				array_push($reviewers_nids, $field_collection_node->field_reviewer[LANGUAGE_NONE][0]['target_id']);
			}
		}

		if (!in_array($user->uid, $reviewers_nids)) drupal_goto($_SERVER["HTTP_REFERER"]);

		$saved_status = null;
		switch($status)
		{
			case "revert": 		{$saved_status = "Submitted";break;}
			case "approve": 	{$saved_status = "Approved";break;}
			case "reject": 		{$saved_status = "Rejected";break;}
			case "processed":	{$saved_status = "Processed";break;}
		}

		if ($status == $enableaccess_status) cambridge_datasets_enableaccess_request($request_nid);

		if ($saved_status)
		{
			$request_node->field_status[LANGUAGE_NONE][0]['value'] = $saved_status;
			node_save($request_node);	
		}

		drupal_goto($_SERVER["HTTP_REFERER"]);
	}	
}

//-------------------------------------------------------------------------------------------|
// End page callback functions
//-------------------------------------------------------------------------------------------|

//-------------------------------------------------------------------------------------------|
//  Dataset-specific functions
//-------------------------------------------------------------------------------------------|

function cambridge_datasets_enableaccess_request($request_nid)
{
	// Enable access to dataset(s) for applicant

	// Create username/password

	// ********* DUMMY VALUES ***********
	$username = 'username';
	$password = 'password';

	// Enable actual access to each dataset

	$request_node = node_load($request_nid);

	if (isset($request_node->field_datasets[LANGUAGE_NONE]))
	{
		$field_collection_nids = $datasets_nids = [];
		foreach($request_node->field_datasets[LANGUAGE_NONE] as $key => $field_collection_nid_array)
		{
			$field_collection_nids[] = $field_collection_nid_array['value'];
		} 
		
		$field_collection_items = entity_load('field_collection_item', $field_collection_nids);
		foreach($field_collection_items as $key => $field_collection_item) 
		{
			$datasets_nids[] = $field_collection_item->field_dataset[LANGUAGE_NONE][0]['target_id'];
		}
		$datasets = entity_load('node', $datasets_nids);

		foreach($datasets as $key => $dataset) 
		{
			cambridge_datasets_enableaccess_dataset($dataset, null, $username, $password);
		}
	}	

	// Send notification email to applicant

	cambridge_datasets_enableaccess_emailapplicant_confirm($request_nid, $username, $password);		
}

function cambridge_datasets_enableaccess_dataset($dataset, $user_id = null, $username = '', $password = '')
{
	// Enable access to specific dataset for user

	$dataset_location = $dataset->field_location[LANGUAGE_NONE][0]['value'];

	// ***************************************************	
	// *************** Enable access here ****************
	// ***************************************************	

	// Code to enable access to specific dataset with username/password

	// ***************************************************	
	// ************* End enable access here **************
	// ***************************************************	
}

function cambridge_datasets_enableaccess_emailapplicant_confirm($request_nid, $username = '', $password = '')
{
	$request_node = node_load($request_nid);
	$firstname = $request_node->field_user_firstname[LANGUAGE_NONE][0]['value'];
	$lastname = $request_node->field_user_lastname[LANGUAGE_NONE][0]['value'];
	$email = $request_node->field_user_email[LANGUAGE_NONE][0]['value'];
	$fullname = trim("$firstname $lastname");

	$content = 
	[
		'subject' => t('Dataset Access Enabled'),
		'body' => 
		  t('Dear '.$fullname.',
		  
You dataset access request has been approved. 

Please login at '.variable_get('cambridge_datasets_access_datasets_url', "").' to download your dataset(s).

For problems or support regarding this system, please contact '.variable_get('site_mail', '')),
	];

	cambridge_datasets_mail_messagequeue_add($email, 0, $content);
}

//-------------------------------------------------------------------------------------------|
//  End dataset-specific functions
//-------------------------------------------------------------------------------------------|

//-------------------------------------------------------------------------------------------|
//  Mail queue functions
//-------------------------------------------------------------------------------------------|

function cambridge_datasets_mail_testemail()
{
	// Send test email to site administrator

	$email = variable_get('site_mail', '');	
	$content = 
	[
		'subject' => t('Test email'),
		'body' => t('Congratulations! This test email has been received successfully.'),
	];	

	$message = drupal_mail('cambridge_datasets', 'any_key', $email, language_default(), $content);	  
	if ($message['send'])
	{
		drupal_set_message('Attempted to send test email','alert');
	}	
	else
	{
		drupal_set_message(t('There was a problem sending your test email', []), 'error');
	}

	drupal_goto('administration');	
}

function cambridge_datasets_mail_messagequeue_addtest()
{
	// Add test message to message queue in order to test cron job

	$email = variable_get('site_mail', '');	
	$content = 
	[
		'subject' => t('Test email sent via message queue'),
		'body' => t('Congratulations! This test email sent through the message queue has been received successfully.'),
	];	

	// Create messagequeue object

	$messagequeue_node = new stdClass();
	$messagequeue_node->title = $content["subject"];
	$messagequeue_node->type = "mail";
	$messagequeue_node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
	$messagequeue_node->uid = $GLOBALS["user"]->uid; 
	$messagequeue_node->body[LANGUAGE_NONE][0]['format'] = 0;
	$messagequeue_node->body[LANGUAGE_NONE][0]['value'] = $content['body'];
	$messagequeue_node->field_user_email[LANGUAGE_NONE][0]['value'] = $email;
	$messagequeue_node->field_mailtype[LANGUAGE_NONE][0]['value'] 	= 0;
						
	node_save($messagequeue_node); 		

	drupal_set_message('Test email added to mail queue','alert');

	drupal_goto('administration');	
}

function cambridge_datasets_mail_trim_text($text)
{
	// Basic function to ensure text doesn't break max limits on short text fields
	
	$text = trim($text);
	$text = substr($text, 0, 198);
	return $text;
}

function cambridge_datasets_mail_messagequeue_add($email, $type, $content) 
{
	// Add message to message queue

	$email = trim($email);

	if ($type == 1)
	{
		// Delete any other mail items with type '1' 
		// to prevent multiple notification messages piling up on user
		// within specified queue window

		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node');
		$query->entityCondition('bundle', 'mail');
		$query->fieldCondition('field_user_email', 'value', $email, '=');
		$query->fieldCondition('field_mailtype', 'value', 1, '=');
		$query->fieldCondition('field_sent', 'value', 0, '=');
		$result = $query->execute();
		if (isset($result['node'])) node_delete_multiple(array_keys($result['node']));		
	}

	// Create messagequeue object

	$messagequeue_node = new stdClass();
	$messagequeue_node->title = $content["subject"];
	$messagequeue_node->type = "mail";
	$messagequeue_node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
	$messagequeue_node->uid = $GLOBALS["user"]->uid; 
	$messagequeue_node->body[LANGUAGE_NONE][0]['format'] = 0;
	$messagequeue_node->body[LANGUAGE_NONE][0]['value'] = $content['body'];
	$messagequeue_node->field_user_email[LANGUAGE_NONE][0]['value'] = $email;
	$messagequeue_node->field_mailtype[LANGUAGE_NONE][0]['value'] 	= $type;
						
	node_save($messagequeue_node); 	
}

function cambridge_datasets_mail_messagequeue_process() 
{
	// Send all mail messages in message queue that haven't been sent

	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node');
	$query->entityCondition('bundle', 'mail');
	$query->fieldCondition('field_sent', 'value', 0, '=');
	$result = $query->execute();
	if (isset($result['node'])) 
	{
		$mail_nids = array_keys($result['node']);
		$mails = entity_load('node', $mail_nids);
		$mail_count = 1;

		foreach($mails as $key => $value) 
		{
			print "Sending message $mail_count<br>".chr(10);

			$email = $value->field_user_email[LANGUAGE_NONE][0]['value'];
			$content = ['subject' => $value->title, 'body' => $value->body[LANGUAGE_NONE][0]['value']];
			$message = drupal_mail('cambridge_datasets', 'any_key', $email, language_default(), $content);	  
			if ($message['send'])
			{
				$value->field_sent[LANGUAGE_NONE][0]['value'] = 1;
				node_save($value);
			}

			$mail_count++;
		}	

		print '<br/>';
	} 

	print '<button onclick="self.close()">Close this tab/window</button>';
}

function cambridge_datasets_mail_notifyreviewers($reviewers_nids)
{
	// Queue messagequeue object that informs reviewer a request has been received pending their approval

	foreach($reviewers_nids as $key => $reviewer_nid)
	{
		$user = user_load($reviewer_nid);
		$username = $user->name;
		$email = $user->mail;
		$content = 
		[
			'subject' => t('Dataset Access Request Received'),
			'body' => 
			  t('Dear '.$username.',
			  
A dataset access request has been received. 

Please login at '.url('user/login', ['absolute' => TRUE]).' to review it.

For problems or support regarding this system, please contact '.variable_get('site_mail', '')),
		];

		cambridge_datasets_mail_messagequeue_add($email, 1, $content);
	}
}

function cambridge_datasets_mail($key, &$message, $params) 
{
	// Implementation of hook_mail()

	switch ($key) 
	{
		case 'any_key':
			$message['subject'] = $params['subject'];
			$message['body'][] = $params['body'];
			break;
	}
}

//-------------------------------------------------------------------------------------------|
//  End mail queue functions
//-------------------------------------------------------------------------------------------|


//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  Form builder, validate, and submit functions for request form
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|

function cambridge_datasets_form_request_terms($form, &$form_state) 
{
	// Create 'terms' web form of request process or redirect 
	// to 'request' web form if terms have been accepted

	if (isset($form_state['storage']['page_two'])) 
	{
		return cambridge_datasets_form_request_request($form_state);
	}

	$path_args = explode('/', current_path());
	if (sizeof($path_args) < 3) 
	{
		drupal_set_message(t('No dataset collection defined', []), 'error');
		return '';
	}

	$nid = $path_args[2];
	$form_state['storage']['nodeid'] = $nid;	
	$node = node_load($nid);
	$node_terms = '';
	if (isset($node->field_content_t_c[LANGUAGE_NONE])) $node_terms = $node->field_content_t_c[LANGUAGE_NONE][0]['value'];

	$form['mymarkup'] = 	[
								'#type' => 'markup',
								'#markup' => $node_terms,
							];

	$form['#attributes'] = 	['enctype' => 'multipart/form-data'];

	$form['agree'] = 		[
								'#title' => t(''),
								'#type' => 'checkboxes',
								'#description' => t(''),
								'#options' => array('agree' => t('I agree to the above terms and conditions')),
							];

	$form['next'] = 		[
								'#type' => 'submit',
								'#value' => t('Submit'),
							];	

	return $form;
}

function cambridge_datasets_form_request_request(&$form_state) 
{
	// Create 'request' web form of request process

	$form_datasets = '';

	try {
		$old_error_reporting = error_reporting(0);
		$form_datasets = $form_state['values']['datasets'];
		error_reporting($old_error_reporting);
	} catch (Exception $e) {
		echo 'Caught exception: ',  $e->getMessage(), "\n";
	}

	if (array_key_exists('datasets', $form_state['values'])) $form_datasets = $form_state['values']['datasets'];

	include_once DRUPAL_ROOT . '/includes/locale.inc';
	$countries = country_get_list();
	$countries_text = [];
	foreach($countries as $key => $value) $countries_text[$value] = $value;

	if (!isset($form_state['storage']['nodeid']))
	{
		drupal_set_message(t('No dataset collection defined', []), 'error');
		return '';
	}

	$nid = $form_state['storage']['nodeid'];	
	$node = node_load($nid);
	$node_preface = $node_predata = "";
	if (isset($node->field_content_request_prefac[LANGUAGE_NONE])) $node_preface = $node->field_content_request_prefac[LANGUAGE_NONE][0]['value'];
	if (isset($node->field_content_request_predat[LANGUAGE_NONE]))	$node_predata = $node->field_content_request_predat[LANGUAGE_NONE][0]['value'];
	
	$form['mymarkup'] = 	[
								'#type' => 'markup',
								'#markup' => $node_preface,
							];

	$form['first'] = 		[
								'#prefix' => '<div class="form-request">',
								'#suffix' => '</div>',
								'#type' => 'textfield',
								'#title' => t('First Name'),
								'#default_value' => (isset($form_state['values']['first'])) ? $form_state['values']['first'] : '',  // replacement
								'#description' => "",
								'#size' => 20,
								'#maxlength' => 198,
							];

	$form['last'] = 		[
								'#prefix' => '<div class="form-request">',
								'#suffix' => '</div>',
								'#type' => 'textfield',
								'#title' => t('Last Name'),
								'#default_value' => (isset($form_state['values']['last'])) ? $form_state['values']['last'] : '',  // replacement
								'#description' => "",
								'#size' => 20,
								'#maxlength' => 198,
							];

	$form['email'] = 		[
								'#prefix' => '<div class="form-request">',
								'#suffix' => '</div>',
								'#type' => 'textfield',
								'#title' => t('Email'),
								'#default_value' => (isset($form_state['values']['email'])) ? $form_state['values']['email'] : '',  // replacement
								'#description' => "",
								'#size' => 20,
								'#maxlength' => 198,
							];

	$form['position'] = 	[
								'#prefix' => '<div class="form-request">',
								'#suffix' => '</div>',
								'#type' => 'textfield',
								'#title' => t('Academic Position'),
								'#default_value' => (isset($form_state['values']['position'])) ? $form_state['values']['position'] : '',  // replacement
								'#description' => "",
								'#size' => 20,
								'#maxlength' => 198,
							];

	$form['institution'] =	[
								'#prefix' => '<div class="form-request">',
								'#suffix' => '</div>',
								'#type' => 'textfield',
								'#title' => t('Institution'),
								'#default_value' => (isset($form_state['values']['institution'])) ? $form_state['values']['institution'] : '',  // replacement
								'#description' => "",
								'#size' => 20,
								'#maxlength' => 198,
							];

	$form['department'] = 	[
								'#prefix' => '<div class="form-request">',
								'#suffix' => '</div>',
								'#type' => 'textfield',
								'#title' => t('Department'),
								'#default_value' => (isset($form_state['values']['department'])) ? $form_state['values']['department'] : '',  // replacement
								'#description' => "",
								'#size' => 20,
								'#maxlength' => 198,
							];

	$form['address'] = 		[
								'#prefix' => '<div class="form-request">',
								'#suffix' => '</div>',
								'#type' => 'textarea',
								'#title' => t('Address<br><small>Building number/name, street, town</small>'),
								'#default_value' => (isset($form_state['values']['address'])) ? $form_state['values']['address'] : '',  // replacement
								'#description' => "",
								'#size' => 20,
								'#cols' => 40,
								'#maxlength' => 198,
							];

	$form['region'] = 		[
								'#prefix' => '<div class="form-request">',
								'#suffix' => '</div>',
								'#type' => 'textfield',
								'#title' => t('Region'),
								'#default_value' => (isset($form_state['values']['region'])) ? $form_state['values']['region'] : '',  // replacement
								'#description' => "",
								'#size' => 20,
								'#maxlength' => 198,
							];

	$form['postcode'] = 	[
								'#prefix' => '<div class="form-request">',
								'#suffix' => '</div>',
								'#type' => 'textfield',
								'#title' => t('Postcode/Zip'),
								'#default_value' => (isset($form_state['values']['postcode'])) ? $form_state['values']['postcode'] : '',  // replacement
								'#description' => "",
								'#size' => 20,								
								'#maxlength' => 198,
							];

	// $form['country'] = 		[
	// 							'#type' => 'textfield',
	// 							'#title' => t('Country'),
	// 							'#default_value' => (isset($form_state['values']['country'])) ? $form_state['values']['country'] : '',  // replacement
	// 							'#description' => "",
	// 							'#size' => 20,
	// 							'#maxlength' => 20,
	// 						];

	$form['country'] = 		[
								'#prefix' => '<div class="form-request">',
								'#suffix' => '</div>',
								'#type' => 'select',
								'#title' => t('Country'),
								'#default_value' => 'United Kingdom',
								'#options' => $countries_text
							];

	$form['proposalbrief'] = 	[
								'#type' => 'markup',
								'#markup' => "<h3>Research proposal</h3><small>Please provide a brief description of why you would like access to each of the selected datasets. You should aim for around 200 words. If you request a dataset, and your proposal does not clearly state why you would like access to that dataset, we may reject your application. For example, if you tick the 'T1 anatomicals' box below, then you need to include a statement explaining why you would like the T1 data.
								<br/><br/><b>Current word count: <span id=\"cambridge_datasets_display_count\">0</span></b></small>",
							];

	$form['proposal'] = 	[
								'#prefix' => '<div class="form-request">',
								'#suffix' => '</div>',
								'#type' => 'textarea',
								'#title' => t(''),
								'#default_value' => (isset($form_state['values']['proposal'])) ? $form_state['values']['proposal'] : '',  // replacement
								'#description' => "",
								'#size' => 20,
								'#cols' => 80,
								'#maxlength' => 10000,
								'#attributes' => array(
								'id' => 'cambridge_datasets_word_count',
								),								
							];

	$form['mymarkup2'] = 	[
								'#type' => 'markup',
								'#markup' => '<br/><h3>Datasets</h3>'.$node_predata,
							];
		
	// Get all related 'dataset' objects and create dynamic area of form

	if (isset($node->field_datasets[LANGUAGE_NONE]))
	{
		$field_collection_nids = $datasets_nids = [];
		foreach($node->field_datasets[LANGUAGE_NONE] as $key => $value)
		{
			$field_collection_nids[] = $value['value'];
		} 

		$field_collection_items = entity_load('field_collection_item', $field_collection_nids);
		foreach($field_collection_items as $key => $field_collection_item) 
		{
			$datasets_nids[] = $field_collection_item->field_dataset[LANGUAGE_NONE][0]['target_id'];
		}
		$datasets = entity_load('node', $datasets_nids);
	}

	$listitems = '';
	foreach($datasets as $key => $value) 
	{
		$code = $value->field_code[LANGUAGE_NONE][0]['value'];
		$title = $value->field_datasettitle[LANGUAGE_NONE][0]['value'];

		$listitems .= '
		<li data-selected="false" class="cambridge-datasets-dataset-item">
		<div class="cambridge-datasets-dataset-item-col1">'.$code.'</div> 
		<div class="cambridge-datasets-dataset-item-col2">'.$title.'</div>
		</li>';		
	}

$extrahtml = '
<div class="form-group">
	<p><input type="text" id="cambridge-datasets-dataset-search-input" onkeyup="cambridge_datasets_filter_list()" placeholder="Filter list.." title="Filter list..."> </p>
	<div class="cambridge-datasets-dataset-container">
		<div class="cambridge-datasets-dataset-item-col1">Variable Name</div>
		<div class="cambridge-datasets-dataset-item-col2">Description</div>
	</div>
	<div id="var_scroller" style="overflow-y:auto; overflow-x:hidden;max-height:400px;">
		<ul id="cambridge-datasets-dataset-ul">
		'.$listitems.'
		</ul>
	</div>
	<br/>
	<h3>Selected</h3>
	<div id="cambridge-datasets-dataset-currently-selected"></div>
</div>
<br/>
';			

	$form['datasets'] = 	[
								'#attributes' => array(
									'id' => 'cambridge-datasets-dataset-values',
									'value' => $form_datasets
								),
								'#type' => 'hidden'
							];

	$form['selectdatasets'] = 	[
								'#type' => 'markup',
								'#markup' => $extrahtml,
							];

	$form['submit'] = 		[
								'#type' => 'submit',
								'#value' => t('Submit'),
							];	

	return $form;
}

function cambridge_datasets_form_request_terms_validate($form, &$form_state) 
{
	// Validate 'request' web form

	if (isset($form_state['storage']['page_two'])) 
	{
		$error_fields = [];
	
		if (!$form_state['values']['first']) 		{array_push($error_fields, 'first name'); form_set_error('first', '');}
		if (!$form_state['values']['last'])			{array_push($error_fields, 'last name'); form_set_error('last', '');}
		if (!valid_email_address($form_state['values']['email']))	{array_push($error_fields, 'valid email address'); form_set_error('email', '');}
		if (!$form_state['values']['position'])		{array_push($error_fields, 'academic position'); form_set_error('position', '');}
		if (!$form_state['values']['institution'])	{array_push($error_fields, 'institution'); form_set_error('institution', '');}
		if (!$form_state['values']['department'])	{array_push($error_fields, 'department'); form_set_error('department', '');}
		if (!$form_state['values']['address'])		{array_push($error_fields, 'address'); form_set_error('address', '');}
		if (!$form_state['values']['region'])		{array_push($error_fields, 'region'); form_set_error('region', '');}
		if (!$form_state['values']['postcode'])		{array_push($error_fields, 'postcode'); form_set_error('postcode', '');}
		if (!$form_state['values']['proposal'])		{array_push($error_fields, 'proposal'); form_set_error('proposal', '');}
		if (!$form_state['values']['datasets']) 	{array_push($error_fields, 'datasets'); form_set_error('dummygroup', '');}

		if (sizeof($error_fields) != 0) form_set_error('', 'Please enter or select your '.implode($error_fields, ', '));

		return;
	}

	if ($form_state['values']['agree']['agree'] !== 'agree')
	{
		form_set_error('agree', t('You must agree to the terms and conditions before you can make a request', []));
	}
}

function cambridge_datasets_form_request_terms_submit($form, &$form_state) 
{
	// Process content of 'request' web form that contains user's request

	if ($form_state['clicked_button']['#id'] == 'edit-next') 
	{
		$form_state['storage']['page_two'] = TRUE; 
		$form_state['storage']['page_one_values'] = $form_state['values'];
		$form_state["rebuild"] = TRUE;   
	}
	else 
	{
		$collection_nid 	= $form_state['storage']['nodeid'];	
		$field_first 		= cambridge_datasets_mail_trim_text($form_state['values']['first']);
		$field_last 		= cambridge_datasets_mail_trim_text($form_state['values']['last']);
		$field_email 		= cambridge_datasets_mail_trim_text($form_state['values']['email']);
		$field_position 	= cambridge_datasets_mail_trim_text($form_state['values']['position']);
		$field_institution 	= cambridge_datasets_mail_trim_text($form_state['values']['institution']);
		$field_department 	= cambridge_datasets_mail_trim_text($form_state['values']['department']);
		$field_address 		= trim($form_state['values']['address']);
		$field_region 		= cambridge_datasets_mail_trim_text($form_state['values']['region']);
		$field_postcode 	= cambridge_datasets_mail_trim_text($form_state['values']['postcode']);
		$field_country		= cambridge_datasets_mail_trim_text($form_state['values']['country']);
		$field_proposal 	= trim($form_state['values']['proposal']);
		$field_datasets 	= trim($form_state['values']['datasets']);
		unset ($form_state['storage']); 

		// Save data in case anything goes wrong with creating object in Drupal

		$datastore_request_folder_path = rtrim(variable_get('cambridge_datasets_datastore_path', ""), '/')."/requests";
		file_prepare_directory($datastore_request_folder_path, FILE_CREATE_DIRECTORY);

		$datastore_legacy_array = [];
		$datastore_legacy_array['firstname'] = $field_first;
		$datastore_legacy_array['lastname'] = $field_last;
		$datastore_legacy_array['email'] = $field_email;
		$datastore_legacy_array['academicpos'] = $field_position;
		$datastore_legacy_array['institution'] = $field_institution;
		$datastore_legacy_array['department'] = $field_department;
		$datastore_legacy_array['street'] = $field_address;
		$datastore_legacy_array['city'] = $field_region;
		$datastore_legacy_array['postcode'] = $field_postcode;
		$datastore_legacy_array['country'] = $field_country;
		$datastore_legacy_array['proposal'] = $field_proposal;
		$datastore_legacy_array['requested_data'] = $field_datasets;

		$json = json_encode($datastore_legacy_array);
		$datastore_request_file_name = $field_first.'_'.'@£$%^^   *(&^%$£'.$field_last.'_'.date("F_j_Y_g_i_a").'.json';
		$datastore_request_file_name = preg_replace('/[^A-Za-z_0-9\.\:]/', '', $datastore_request_file_name); // remove weird characters
		$datastore_request_file_name = preg_replace('/[\s]/', '', $datastore_request_file_name); // remove spaces
		$datastore_request_file_path = $datastore_request_folder_path.'/'.$datastore_request_file_name;

		file_put_contents($datastore_request_file_path , $json);

		// Set up 'request' object

		$request_node = new stdClass();
		$request_node->title = "Request from ".substr("$field_first $field_last", 0, 100)." [".date("Y-m-d H:i:s")."]";
		$request_node->type = "request";
		$request_node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
		$request_node->uid = $GLOBALS["user"]->uid; 
		$request_node->field_collection[LANGUAGE_NONE][]['target_id'] 		= $collection_nid;
		$request_node->field_user_firstname[LANGUAGE_NONE][0]['value'] 		= $field_first;
		$request_node->field_user_lastname[LANGUAGE_NONE][0]['value'] 		= $field_last;
		$request_node->field_user_email[LANGUAGE_NONE][0]['value'] 			= $field_email;
		$request_node->field_user_position[LANGUAGE_NONE][0]['value'] 		= $field_position;
		$request_node->field_user_institution[LANGUAGE_NONE][0]['value'] 	= $field_institution;
		$request_node->field_user_department[LANGUAGE_NONE][0]['value'] 	= $field_department;
		$request_node->field_user_address[LANGUAGE_NONE][0]['value'] 		= $field_address;
		$request_node->field_user_region[LANGUAGE_NONE][0]['value'] 		= $field_region;
		$request_node->field_user_postcode[LANGUAGE_NONE][0]['value'] 		= $field_postcode;
		$request_node->field_user_country[LANGUAGE_NONE][0]['value'] 		= $field_country;
		$request_node->field_user_proposal[LANGUAGE_NONE][0]['value'] 		= $field_proposal;
	
		// Add reviewers for particular collection of datasets

		$collection_node = node_load($collection_nid);
		if (isset($collection_node->field_reviewers[LANGUAGE_NONE]))
		{
			$request_node->field_reviewers[LANGUAGE_NONE] = $collection_node->field_reviewers[LANGUAGE_NONE];

			$reviewers_nids = [];
			foreach($collection_node->field_reviewers[LANGUAGE_NONE] as $key => $value)
			{
				$field_collection_node = entity_load('field_collection_item', array($value['value']));
				$field_collection_node = array_shift($field_collection_node);
				array_push($reviewers_nids, $field_collection_node->field_reviewer[LANGUAGE_NONE][0]['target_id']);
			}

			cambridge_datasets_mail_notifyreviewers($reviewers_nids);
		}

		// Add selected datasets to request

		$selecteddatasets_dupe_array = explode(",", $field_datasets);
		$selecteddatasets_array = [];
		for($i = 0; $i < sizeof($selecteddatasets_dupe_array); $i += 2) array_push($selecteddatasets_array, $selecteddatasets_dupe_array[$i]);

		if (isset($collection_node->field_datasets[LANGUAGE_NONE]))
		{
			$field_collection_nids = $datasets_nids = [];
			foreach($collection_node->field_datasets[LANGUAGE_NONE] as $key => $value)
			{
				$field_collection_nids[] = $value['value'];
			} 
			
			$field_collection_items = entity_load('field_collection_item', $field_collection_nids);
			foreach($field_collection_items as $key => $field_collection_item) 
			{
				$datasets_nids[] = $field_collection_item->field_dataset[LANGUAGE_NONE][0]['target_id'];
			}
			$datasets = entity_load('node', $datasets_nids);

			foreach($datasets as $key => $value) 
			{
				if (in_array($value->field_code[LANGUAGE_NONE][0]['value'], $selecteddatasets_array))
				{
					$field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_datasets')); 
					$field_collection_item->setHostEntity('node', $request_node); 
					$field_collection_item->field_dataset[LANGUAGE_NONE][0]['target_id'] = $value->nid; 
					$field_collection_item->save(TRUE); 
				}
			}
		}

		// Save node

		node_save($request_node); 	

		// Give feedback to user and redirect to home page

		drupal_set_message('Your request has been sent!');
		$form_state['redirect'] = 'cambridge_datasets'; 
	}
}

//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  End Form builder, validate, and submit functions for request form
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|


//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  Form builder, validate, and submit functions for import form
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|

function cambridge_datasets_form_import() 
{
	// Create 'import' form
	
	$form['#attributes'] = 	['enctype' => 'multipart/form-data'];
	$form['collection'] = 	[ 
								'#title' => t('<h3>Collection title</h3>'),
								'#type'  => 'textfield',
							];	
	$form['csvfile'] = 		[ 
								'#title' => t('<h3>CSV file</h3>'),
								'#type'  => 'file',
								'#description' => ($max_size = parse_size(ini_get('upload_max_filesize'))) ? t('Due to server restrictions, the <strong>maximum upload file size is !max_size</strong>. Files that exceed this size will be disregarded.', ['!max_size' => format_size($max_size)]) : '',    
							];	
	$form['submit'] = 		[
								'#type' => 'submit',
								'#value' => t('Import >>'),
							];	
	$form['#validate'] = 	[
								'cambridge_datasets_form_import_fileupload_validate',
								'cambridge_datasets_form_import_file_validate',
							];
	
	return $form ;
}

function cambridge_datasets_form_import_fileupload_validate(&$form, &$form_state) 
{
	// Validate whether general upload has worked
	
	$validators = ['file_validate_extensions' => ['csv']];

	if ( $file = file_save_upload('csvfile', $validators, "public://", FILE_EXISTS_REPLACE) ) 
	{
		$form_state['values']['csvupload'] = $file->destination;       
	}
	else 
	{
		form_set_error('cambridge_datasets', t('Unable to copy upload file to !dest', array('!dest' => $destination)));
	}      
}


function cambridge_datasets_form_import_file_validate(&$form, &$form_state) 
{
	// Validate content of upload
	
	if (isset($form_state['values']['csvupload'])) 
	{
		if ($handle = fopen($form_state['values']['csvupload'], 'r')) 
		{
			fclose($handle);
		}
		else 
		{
			form_set_error('csvfile', t('Unable to read uploaded file !filepath', ['!filepath' => $form_state['values']['csvupload']]));
		}
	}
}

function cambridge_datasets_form_import_submit(&$form, &$form_state) 
{
	// Process content of actual upload
	
	$batch = 	[
					'title' => t('Importing CSV ...'),
					'operations' => [],
					'init_message' => t('Commencing'),
					'progress_message' => t('Processing...'),
					'error_message' => t('An error occurred during processing'),
					'finished' => 'cambridge_datasets_import_finished',
				];

	if (isset( $form_state['values']['csvupload'])) 
	{
		if ($handle = fopen($form_state['values']['csvupload'], 'r')) 
		{
			$batch['operations'][] = array('_cambridge_datasets_import_remember_filename', array($form_state['values']['csvupload'])) ;

			$line_count = 1 ;

			// Create master 'collection' record to hold all datasets

			$batch['operations'][] = array('_cambridge_datasets_import_create_collection', array($form_state['values']['collection'])) ;					
 
			while ($line = fgetcsv($handle, 4096)) 
			{    	
				// Iterate through every line of upload
				
				if ($line_count == 1)
				{
					// Initialize import

					$batch['operations'][] = array('_cambridge_datasets_import_init', array(array_map('base64_encode', $line))) ;					
				}

				// Check to see whether we have valid data in line
					
				$line_concatenated = implode("", $line);
				$line_concatenated = trim(preg_replace('/[^A-Z0-9]/i', "", $line_concatenated));

				if ($line_concatenated != "")
				{
					// Batch import all lines as 'dataset' records
					
					$batch['operations'][] = array('_cambridge_datasets_import_processline', array(array_map('base64_encode', $line)));       					
				}				
				
				// Increment line count
				
				$line_count++;					
			}
			fclose($handle);	

			// Perform final data creation once all lines imported

			$batch['operations'][] = array('_cambridge_datasets_import_linesimported', []);       					
		}
	} 
	
	batch_set($batch);	
}

//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  End Form builder, validate, and submit functions for import form
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|


//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  Batch API helpers
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|

function _cambridge_datasets_import_remember_filename($filename, &$context) 
{
	// Store upload filename
	
	$context['results']['uploaded_filename'] = $filename;
}

function _cambridge_datasets_import_create_collection($collection_name, &$context)
{
	// Create master 'collection' object

	$sCollectionTitle = 'Collection';						
	
	$collection_node = new stdClass();
	$collection_node->title = $collection_name;
	$collection_node->type = "collection";
	$collection_node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
	$collection_node->uid = $GLOBALS["user"]->uid; 
	$collection_node->body[LANGUAGE_NONE][0]['format'] = 'full_html';
	$collection_node->body[LANGUAGE_NONE][0]['value'] = '<div class="campl-content-container"><h2>'.$collection_name.'</h2></div>';

	node_save($collection_node);

	$context['results']['collection_nid'] = $collection_node->nid;
	$context['results']['collection_title'] = $collection_name;
}

function _cambridge_datasets_import_init($initvars, &$context)
{
	// Initialize import variables

	$context['results']['rows_imported'] = 0;
	$context['results']['datasets_nids'] = [];
}
							
function _cambridge_datasets_import_processline($line, &$context) 
{
	// Import each line into dataset system

	set_time_limit(30);
	
    $context['results']['rows_imported']++;
    $line = $cleaned_line = array_map('base64_decode', $line);

	//-------------------------------------------------------------------------------------------|
    //  Give feedback to the importer about which operation we're preforming
    //-------------------------------------------------------------------------------------------|

	$context['message'] = t('Importing row !c', array( '!c' => $context['results']['rows_imported'] ));
	  						
    //-------------------------------------------------------------------------------------------|
    //  Convert line of the CSV file into new 'dataset' object.
    //-------------------------------------------------------------------------------------------|

	// Create dataset node

	$dataset_node = new stdClass();
	$dataset_node->title = $context['results']['collection_title'].": ".$line[1];
	$dataset_node->type = "dataset";
	$dataset_node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
	$dataset_node->uid = $GLOBALS["user"]->uid; 
	$dataset_node->field_code[LANGUAGE_NONE][0]['value'] 			= $line[0];
	$dataset_node->field_datasettitle[LANGUAGE_NONE][0]['value'] 	= $line[1];
	$dataset_node->field_location[LANGUAGE_NONE][0]['value'] 		= $line[2];
	node_save($dataset_node); 	

	$context['results']['datasets_nids'][] = $dataset_node->nid;
		
	if ( $line[1] == 'ROW' && $line[2] == 'FAILS' ) 
	{
		$context['results']['failed_rows'][] = $line ;
	}
}

function _cambridge_datasets_import_linesimported(&$context)
{
	// Attach all created datasets to collection

	$collection_node = node_load($context['results']['collection_nid']);

	//-------------------------------------------------------------------------------------------|
	//  Give feedback to the importer about which operation we're preforming
	//-------------------------------------------------------------------------------------------|

	$context['message'] = t('Connecting rows', []);

	foreach($context['results']['datasets_nids'] as $key => $dataset_nid)
	{
		// Create field collection item to attach dataset to collection 

		$field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_datasets')); 
		$field_collection_item->setHostEntity('node', $collection_node); 
		$field_collection_item->field_dataset[LANGUAGE_NONE][0]['target_id'] = $dataset_nid; 
		$field_collection_item->save(TRUE); 
	}

	// Remember to save collection node in order to save field collection item

	node_save($collection_node);
}

function cambridge_datasets_import_finished($success, $results, $operations) 
{
	// Called once import finished
	  	  
    if (!empty($results['failed_rows'])) 
	{
		$dir  = file_directory_path() . '/cambridge_datasets/' ;
		if (file_check_directory($dir, FILE_CREATE_DIRECTORY)) 
		{
			$csv_filename 	= 'failed_rows-'. basename($results['uploaded_filename']); // we validated extension on upload
			$csv_filepath 	= $dir .'/'. $csv_filename;
			$targs 			= 	[
									'!csv_url' => l(check_plain($csv_filename), $csv_filepath),
									'%csv_filename' => $csv_filename,
									'%csv_filepath' => $csv_filepath
								];
			
			if ($handle = fopen($csv_filepath, 'w+')) 
			{
				foreach($results['failed_rows'] as $failed_row) 
				{
					fputcsv($handle, $failed_row);
				}
				fclose($handle);
				drupal_set_message(t('Some rows failed to import. You may download a CSV of these rows: !csv_url', $targs), 'error');
			}
			else 
			{
				drupal_set_message(t('Some rows failed to import, but unable to write error CSV to %csv_filepath', $targs), 'error');
			}
		}
		else 
		{
			drupal_set_message(t('Some rows failed to import, but unable to create directory for error CSV at %csv_directory', $targs), 'error');
		}
	}
	else
	{
		drupal_set_message("Import of ".basename($results['uploaded_filename'])." complete. ".$results['rows_imported']." row(s) imported");
	}
	
	return t('The CSV import has completed.');
}
  
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  End batch API helpers
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|

