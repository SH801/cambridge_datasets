<?php
// vi: tabstop=8 shiftwidth=8 bs=2

// This module handles importing of Cambridge University datasets 
// and processing of dataset requests generated by anonymous users
//
// Copyright (c) 2019, haselwimmer@gmail.com
//
// $Id: index.php v2.1a 2019/07/013 09:00:00 sh801 
//
// Version 1.0a


//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  Hooks and Setup Functions
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|

function cambridge_dataset_menu() 
{
	//  Implementation of hook_menu, this provides a front-end for the importer
	
	$items['cambridge_dataset'] = 		[
											'title' => '',
											'description' => 'Home page',
											'access callback' => TRUE,
											'access arguments' => ['access cambridge_dataset content'],
											'page callback' => 'cambridge_dataset_default_pagecallback',
											'type' => MENU_NORMAL_ITEM,
										];	  

	$items['cambridge_dataset/apply'] = [
											'title' => 'Apply to use dataset',
											'description' => 'Apply to use dataset.',
											'access callback' => TRUE,
											'page callback' => 'cambridge_dataset_apply_pagecallback',
											'type' => MENU_NORMAL_ITEM,
										];	  

	$items['cambridge_dataset/updatereview'] = [
											'title' => 'Update review',
											'description' => 'Update review.',
											'access callback' => 'cambridge_dataset_user_has_role',
											'access arguments' => ['reviewer', 'finalreviewer', 'administrator'],
											'page callback' => 'cambridge_dataset_updatereview_pagecallback',
											'type' => MENU_NORMAL_ITEM,
										];	  

	$items['cambridge_dataset/applicationreject'] = [
											'title' => 'Reject application',
											'description' => 'Reject application.',
											'access callback' => 'cambridge_dataset_user_has_role',
											'access arguments' => ['finalreviewer', 'administrator'],
											'page callback' => 'cambridge_dataset_applicationstatus_pagecallback',
											'page arguments' => ['reject'],
											'type' => MENU_NORMAL_ITEM,
										];	  

	$items['cambridge_dataset/applicationapprove'] = [
											'title' => 'Approve application',
											'description' => 'Approve application.',
											'access callback' => 'cambridge_dataset_user_has_role',
											'access arguments' => ['finalreviewer', 'administrator'],
											'page callback' => 'cambridge_dataset_applicationstatus_pagecallback',
											'page arguments' => ['approve'],
											'type' => MENU_NORMAL_ITEM,
										];	  

	$items['cambridge_dataset/applicationprocessed'] = [
											'title' => 'Application processed',
											'description' => 'Application processed.',
											'access callback' => 'cambridge_dataset_user_has_role',
											'access arguments' => ['finalreviewer', 'administrator'],
											'page callback' => 'cambridge_dataset_applicationstatus_pagecallback',
											'page arguments' => ['processed'],
											'type' => MENU_NORMAL_ITEM,
										];	  
										
	$items['cambridge_dataset/import'] = [
											'title' => 'Import Dataset Collection',
											'description' => 'Import content from a <abbr title="Comma Separated Values">CSV</abbr> file.',
											'access callback' => 'user_access',
											'access arguments' => ['administer cambridge_dataset content'],
											'page callback' => 'cambridge_dataset_import_pagecallback',
											'type' => MENU_NORMAL_ITEM,
										];	  

	$items['cambridge_dataset/processmessagequeue'] = 
										[
											'title' => 'Process email queue',
											'description' => 'Process email queue.',
											'access callback' => TRUE,
											'access arguments' => ['access cambridge_dataset content'],
											'page callback' => 'cambridge_dataset_messagequeue_process',
											'type' => MENU_NORMAL_ITEM,
										];	  

	$items['admin/settings/cambridge_dataset'] = 	[
											'title' => 'Cambridge Dataset Module Settings',
											'description' => 'Settings for the Cambridge Dataset module',
											'page callback' => 'drupal_get_form',
											'page arguments' => array('cambridge_dataset_admin'),
											'access arguments' => array('administer cambridge_dataset settings'),
											'type' => MENU_NORMAL_ITEM
										];
										
	return $items ;
}
	  
function cambridge_dataset_user_login(&$edit, $account) 
{
	$user = user_load($account->uid);

	if (in_array('reviewer', $user->roles))
	{
		$edit['redirect'] = 'applications';
	}
	else
	{
		$edit['redirect'] = 'cambridge_dataset';
	}
}

function cambridge_dataset_user_has_role()
{
	// Check whether user has role and return boolean accordingly

	global $user;
	$roles = func_get_args();
	foreach ($roles as $role) 
	{
		if (in_array($role, $user->roles)) return TRUE;
	}
	return FALSE; 	
}

function cambridge_dataset_permission() 
{
	// Implements hook_permission().
	
	return ['access cambridge_dataset content' => ['title' => t('Access University of Cambridge Dataset system')]];
}
  
function cambridge_dataset_admin() 
{
	// Define module configuration page
	
	$form = [];

	$form['cambridge_dataset_datastore_path'] = 	[
													'#type' => 'textfield',
													'#title' => t('Datastore path'),
													'#default_value' => variable_get('cambridge_dataset_datastore_path', ""),
													'#size' => 100,
													'#maxlength' => 1000,
													'#description' => t("Path to a folder where data, eg. saved applications, will be stored"),
													'#required' => TRUE
												];
												
	return system_settings_form($form);
}

function cambridge_dataset_entity_delete($entity, $type) 
{
	// Delete related entities when examination deleted
	
	if (!property_exists($entity, 'collection')) return;

	if ($entity->type == "collection")
	{
		$collection_nid = $entity->nid;
		
		// Get all related 'dataset' objects 
		
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node');
		$query->entityCondition('bundle', 'dataset');
		$query->fieldCondition('field_collection', 'target_id', $collection_nid, '=');
		$result = $query->execute();
		node_delete_multiple(array_keys($result['node']));		
	}
}

//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  End hooks and setup functions
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|

//-------------------------------------------------------------------------------------------|
//  Page callback functions
//-------------------------------------------------------------------------------------------|

function cambridge_dataset_default_pagecallback()
{
	// Default information page for module			
	
	$email_contact = variable_get('site_mail', '');
	$module_path = drupal_get_path('module', 'cambridge_dataset');
	$output = '<div class="campl-content-container"><h1>Welcome to the Cambridge University Dataset Portal</h1>
	<p style="max-width:640px;">This system provides an overview of datasets within the University of Cambridge that are accessible to external researchers. 
	You can apply to access any dataset by filling in a simple web form.</p>
	<p>In the event of problems, please email the site administrator at <a href="mailto:'.$email_contact.'">'.$email_contact.'</a><br/><br/></p>
	<p><a href="collections"><button type="button">View Dataset Collections >></button></a></p>
	';
	$output .= '</div>';

	return $output;
}

function cambridge_dataset_updatereview_pagecallback()
{
	// Add/Update review

	// Delete existing review for user

	global $user;
	$reviewer = $finalreviewer = false;
	
	if (in_array('reviewer', $user->roles)) $reviewer = true;
	if (in_array('finalreviewer', $user->roles)) $finalreviewer = true;
	if (in_array('administrator', $user->roles)) $finalreviewer = true;

	if ((!$reviewer) && (!$finalreviewer)) 	drupal_goto($_SERVER["HTTP_REFERER"]);
	
	$application_nid = $_POST['application_nid'];
	$decision = $_POST['decision'];
	$comment = $_POST['comment'];

	$application_node = node_load($application_nid);
	if (!$application_node) drupal_goto($_SERVER["HTTP_REFERER"]);
	$reviews = field_get_items('node', $application_node, 'field_reviews');
	
	if ($reviews) 
	{
		foreach($reviews as $review)
		{
			$fc = field_collection_field_get_entity($review);
			$reviewer_nid = $fc->field_reviewer[LANGUAGE_NONE][0]['target_id'];
			if (!$reviewer_nid) continue;
			if ($reviewer_nid != $user->uid) continue;
			entity_delete('field_collection_item', $fc->item_id);
		}
	}

	$field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_reviews')); 
	$field_collection_item->setHostEntity('node', $application_node); 
	$field_collection_item->field_decision[LANGUAGE_NONE][0]['value'] = $decision; 
	$field_collection_item->field_comment[LANGUAGE_NONE][0]['value'] = $comment; 
	$field_collection_item->field_reviewer[LANGUAGE_NONE][0]['target_id'] = $user->uid; 
	$field_collection_item->save(TRUE); 

	node_save($application_node); 	

	drupal_goto($_SERVER["HTTP_REFERER"]);
}

function cambridge_dataset_apply_pagecallback() 
{
	// Callback for generating application form

	return drupal_get_form('cambridge_dataset_form_apply_terms');
}

function cambridge_dataset_applicationstatus_pagecallback()
{
	// Modifies status of application

	$status = func_get_args();
	if (isset($_GET['application_nid']))
	{
		$status = $status[0];
		$application_nid = $_GET['application_nid'];
		$application_node = node_load($application_nid);

		$saved_status = null;
		switch($status)
		{
			case "approve": 	{$saved_status = "Approved";break;}
			case "reject": 		{$saved_status = "Rejected";break;}
			case "processed":	{$saved_status = "Processed";break;}
		}

		if ($saved_status)
		{
			$application_node->field_status[LANGUAGE_NONE][0]['value'] = $saved_status;
			node_save($application_node);	
		}

		drupal_goto($_SERVER["HTTP_REFERER"]);
	}	
}

function cambridge_dataset_import_pagecallback()
{
	// Page for importing a collection of datasets

	$module_path = drupal_get_path('module', 'cambridge_dataset');
	$form = drupal_get_form('cambridge_dataset_form_import');

	$output = '<div class="campl-content-container"><p>Import a list of datasets from a CSV file. </p><p>Ensure the file is comma-separated and not tab-separated - if necessary open in Excel and do <i>Save as</i>';
	$output .= drupal_render($form);
	$output .= '</div>';
	
	return $output;
}

//-------------------------------------------------------------------------------------------|
//  End page callback function for the menu item
//-------------------------------------------------------------------------------------------|

//-------------------------------------------------------------------------------------------|
//  Mail queue functions
//-------------------------------------------------------------------------------------------|

function cambridge_dataset_trim_text($text)
{
	$text = trim($text);
	$text = substr($text, 0, 198);
	return $text;
}

function cambridge_dataset_messagequeue_add($email, $type, $content) 
{
	$email = trim($email);

	if ($type == 1)
	{
		// Delete any other mail items with type '1' 
		// to prevent multiple notification messages piling up on user
		// within specified queue window

		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node');
		$query->entityCondition('bundle', 'mail');
		$query->fieldCondition('field_user_email', 'value', $email, '=');
		$query->fieldCondition('field_mailtype', 'value', 1, '=');
		$query->fieldCondition('field_sent', 'value', 0, '=');
		$result = $query->execute();
		if (isset($result['node'])) node_delete_multiple(array_keys($result['node']));		
	}

	$messagequeue_node = new stdClass();
	$messagequeue_node->title = $content["subject"];
	$messagequeue_node->type = "mail";
	$messagequeue_node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
	$messagequeue_node->uid = $GLOBALS["user"]->uid; 
	$messagequeue_node->body[LANGUAGE_NONE][0]['format'] = 0;
	$messagequeue_node->body[LANGUAGE_NONE][0]['value'] = $content['body'];
	$messagequeue_node->field_user_email[LANGUAGE_NONE][0]['value'] = $email;
	$messagequeue_node->field_mailtype[LANGUAGE_NONE][0]['value'] 	= $type;
						
	node_save($messagequeue_node); 	
}

function cambridge_dataset_messagequeue_process() 
{
	// Send all mail messages in message queue that haven't been sent

	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node');
	$query->entityCondition('bundle', 'mail');
	$query->fieldCondition('field_sent', 'value', 0, '=');
	$result = $query->execute();
	if (isset($result['node'])) 
	{
		$mail_nids = array_keys($result['node']);
		$mails = entity_load('node', $mail_nids);
		$mail_count = 1;

		foreach($mails as $key => $value) 
		{
			print "Sending message $mail_count<br>".chr(10);

			$email = $value->field_user_email[LANGUAGE_NONE][0]['value'];
			$content = ['subject' => $value->title, 'body' => $value->body[LANGUAGE_NONE][0]['value']];
			$message = drupal_mail('cambridge_dataset', 'any_key', $email, language_default(), $content);	  
			if ($message['send'])
			{
				$value->field_sent[LANGUAGE_NONE][0]['value'] = 1;
				node_save($value);
			}

			$mail_count++;
		}	

		print '<br/>';
	} 

	print '<button onclick="self.close()">Close this tab/window</button>';
}

function cambridge_dataset_notifyreviewers($reviewers_nids)
{
	// Send an email to reviewer to inform them a request has been received pending their approval

	foreach($reviewers_nids as $key => $reviewer_nid)
	{
		$user = user_load($reviewer_nid);
		$username = $user->name;
		$email = $user->mail;
		$content = 
		[
			'subject' => t('Dataset Access Request Received'),
			'body' => 
			  t('Dear '.$username.',
			  
A dataset access request has been received. 

Please login at '.url('user/login', ['absolute' => TRUE]).' to review it.

For problems or support regarding this system, please contact '.variable_get('site_mail', '')),
		];

		cambridge_dataset_messagequeue_add($email, 1, $content);
	}
}

function cambridge_dataset_mail($key, &$message, $params) 
{
	switch ($key) 
	{
		case 'any_key':
			$message['subject'] = $params['subject'];
			$message['body'][] = $params['body'];
			break;
	}
}

//-------------------------------------------------------------------------------------------|
//  End mail queue functions
//-------------------------------------------------------------------------------------------|


//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  Form builder, validate, and submit functions for apply form
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|

function cambridge_dataset_form_apply_terms($form, &$form_state) 
{
	// Create 'terms' web form of apply process or redirect 
	// to 'application' web form if terms have been agreed

	if (isset($form_state['storage']['page_two'])) 
	{
		return cambridge_dataset_form_apply_application($form_state);
	}

	$path_args = explode('/', current_path());
	if (sizeof($path_args) < 3) 
	{
		drupal_set_message(t('No dataset collection defined', []), 'error');
		return '';
	}

	$nid = $path_args[2];
	$form_state['storage']['nodeid'] = $nid;	
	$node = node_load($nid);
	$node_terms = '';
	if (isset($node->field_content_t_c[LANGUAGE_NONE])) $node_terms = $node->field_content_t_c[LANGUAGE_NONE][0]['value'];

	$form['mymarkup'] = 	[
								'#type' => 'markup',
								'#markup' => $node_terms,
							];

	$form['#attributes'] = 	['enctype' => 'multipart/form-data'];

	$form['agree'] = 		[
								'#title' => t(''),
								'#type' => 'checkboxes',
								'#description' => t(''),
								'#options' => array('agree' => t('I agree to the above terms and conditions')),
							];

	$form['next'] = 		[
								'#type' => 'submit',
								'#value' => t('Submit'),
							];	

	return $form;
  }

function cambridge_dataset_form_apply_application(&$form_state) 
{
	// Create 'application' web form of apply process

	$form_datasets = '';

	try {
		$old_error_reporting = error_reporting(0);
		$form_datasets = $form_state['values']['datasets'];
		error_reporting($old_error_reporting);
	} catch (Exception $e) {
		echo 'Caught exception: ',  $e->getMessage(), "\n";
	}

	if (array_key_exists('datasets', $form_state['values'])) $form_datasets = $form_state['values']['datasets'];

	include_once DRUPAL_ROOT . '/includes/locale.inc';
	$countries = country_get_list();
	$countries_text = [];
	foreach($countries as $key => $value) $countries_text[$value] = $value;

	if (!isset($form_state['storage']['nodeid']))
	{
		drupal_set_message(t('No dataset collection defined', []), 'error');
		return '';
	}

	$nid = $form_state['storage']['nodeid'];	
	$node = node_load($nid);
	$node_preface = $node_predata = "";
	if (isset($node->field_content_application_prefac[LANGUAGE_NONE])) $node_preface = $node->field_content_application_prefac[LANGUAGE_NONE][0]['value'];
	if (isset($node->field_content_application_predat[LANGUAGE_NONE]))	$node_predata = $node->field_content_application_predat[LANGUAGE_NONE][0]['value'];
	
	$form['mymarkup'] = 	[
								'#type' => 'markup',
								'#markup' => $node_preface,
							];

	$form['first'] = 		[
								'#prefix' => '<div class="form-apply">',
								'#suffix' => '</div>',
								'#type' => 'textfield',
								'#title' => t('First Name'),
								'#default_value' => (isset($form_state['values']['first'])) ? $form_state['values']['first'] : '',  // replacement
								'#description' => "",
								'#size' => 20,
								'#maxlength' => 198,
							];

	$form['last'] = 		[
								'#prefix' => '<div class="form-apply">',
								'#suffix' => '</div>',
								'#type' => 'textfield',
								'#title' => t('Last Name'),
								'#default_value' => (isset($form_state['values']['last'])) ? $form_state['values']['last'] : '',  // replacement
								'#description' => "",
								'#size' => 20,
								'#maxlength' => 198,
							];

	$form['email'] = 		[
								'#prefix' => '<div class="form-apply">',
								'#suffix' => '</div>',
								'#type' => 'textfield',
								'#title' => t('Email'),
								'#default_value' => (isset($form_state['values']['email'])) ? $form_state['values']['email'] : '',  // replacement
								'#description' => "",
								'#size' => 20,
								'#maxlength' => 198,
							];

	$form['position'] = 	[
								'#prefix' => '<div class="form-apply">',
								'#suffix' => '</div>',
								'#type' => 'textfield',
								'#title' => t('Academic Position'),
								'#default_value' => (isset($form_state['values']['position'])) ? $form_state['values']['position'] : '',  // replacement
								'#description' => "",
								'#size' => 20,
								'#maxlength' => 198,
							];

	$form['institution'] =	[
								'#prefix' => '<div class="form-apply">',
								'#suffix' => '</div>',
								'#type' => 'textfield',
								'#title' => t('Institution'),
								'#default_value' => (isset($form_state['values']['institution'])) ? $form_state['values']['institution'] : '',  // replacement
								'#description' => "",
								'#size' => 20,
								'#maxlength' => 198,
							];

	$form['department'] = 	[
								'#prefix' => '<div class="form-apply">',
								'#suffix' => '</div>',
								'#type' => 'textfield',
								'#title' => t('Department'),
								'#default_value' => (isset($form_state['values']['department'])) ? $form_state['values']['department'] : '',  // replacement
								'#description' => "",
								'#size' => 20,
								'#maxlength' => 198,
							];

	$form['address'] = 		[
								'#prefix' => '<div class="form-apply">',
								'#suffix' => '</div>',
								'#type' => 'textarea',
								'#title' => t('Address<br><small>Building number/name, street, town</small>'),
								'#default_value' => (isset($form_state['values']['address'])) ? $form_state['values']['address'] : '',  // replacement
								'#description' => "",
								'#size' => 20,
								'#cols' => 40,
								'#maxlength' => 198,
							];

	$form['region'] = 		[
								'#prefix' => '<div class="form-apply">',
								'#suffix' => '</div>',
								'#type' => 'textfield',
								'#title' => t('Region'),
								'#default_value' => (isset($form_state['values']['region'])) ? $form_state['values']['region'] : '',  // replacement
								'#description' => "",
								'#size' => 20,
								'#maxlength' => 198,
							];

	$form['postcode'] = 	[
								'#prefix' => '<div class="form-apply">',
								'#suffix' => '</div>',
								'#type' => 'textfield',
								'#title' => t('Postcode/Zip'),
								'#default_value' => (isset($form_state['values']['postcode'])) ? $form_state['values']['postcode'] : '',  // replacement
								'#description' => "",
								'#size' => 20,								
								'#maxlength' => 198,
							];

	// $form['country'] = 		[
	// 							'#type' => 'textfield',
	// 							'#title' => t('Country'),
	// 							'#default_value' => (isset($form_state['values']['country'])) ? $form_state['values']['country'] : '',  // replacement
	// 							'#description' => "",
	// 							'#size' => 20,
	// 							'#maxlength' => 20,
	// 						];

	$form['country'] = 		[
								'#prefix' => '<div class="form-apply">',
								'#suffix' => '</div>',
								'#type' => 'select',
								'#title' => t('Country'),
								'#default_value' => 'United Kingdom',
								'#options' => $countries_text
							];

	$form['proposalbrief'] = 	[
								'#type' => 'markup',
								'#markup' => "<h3>Research proposal</h3><small>Please provide a brief description of why you would like access to each of the selected datasets. You should aim for around 200 words. If you request a dataset, and your proposal does not clearly state why you would like access to that dataset, we may reject your application. For example, if you tick the 'T1 anatomicals' box below, then you need to include a statement explaining why you would like the T1 data.
								<br/><br/><b>Current word count: <span id=\"display_count\">0</span></b></small>",
							];

	$form['proposal'] = 	[
								'#prefix' => '<div class="form-apply">',
								'#suffix' => '</div>',
								'#type' => 'textarea',
								'#title' => t(''),
								'#default_value' => (isset($form_state['values']['proposal'])) ? $form_state['values']['proposal'] : '',  // replacement
								'#description' => "",
								'#size' => 20,
								'#cols' => 80,
								'#maxlength' => 10000,
								'#attributes' => array(
									'id' => 'word_count',
								),								
							];

	$form['mymarkup2'] = 	[
								'#type' => 'markup',
								'#markup' => '<br/><h3>Datasets</h3>'.$node_predata,
							];
		
	// Get all related 'dataset' objects 

	$listitems = '';
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node');
	$query->entityCondition('bundle', 'dataset');
	$query->fieldCondition('field_collection', 'target_id', $nid, '=');
	$result = $query->execute();
	if (isset($result['node'])) 
	{
		$datasets_nids = array_keys($result['node']);
		$datasets = entity_load('node', $datasets_nids);
	} 

	foreach($datasets as $key => $value) 
	{
		$code = $value->field_code[LANGUAGE_NONE][0]['value'];
		$title = $value->title;

		$listitems .= '
		<li data-selected="false" class="homeint_listitem">
		<div class="listitem_col1">'.$code.'</div> 
		<div class="listitem_col2">'.$title.'</div>
		</li>';		
	}

$extrahtml = '
<div class="form-group">
	<p><input type="text" id="searchInput" onkeyup="filterList()" placeholder="Filter list.." title="Filter list..."> </p>
	<div class="varlist_headerline_container">
		<div class="listitem_col1">Variable Name</div>
		<div class="listitem_col2">Description</div>
	</div>
	<div id="var_scroller" style="overflow-y:auto; overflow-x:hidden;max-height:400px;">
		<ul id="varUL">
		'.$listitems.'
		</ul>
	</div>
	<br/>
	<h3>Selected</h3>
	<div id="currently_selected"></div>
</div>
<br/>
';			

	$form['datasets'] = 	[
								'#attributes' => array(
									'id' => 'hi_hidden',
									'value' => $form_datasets
								),
								'#type' => 'hidden'
							];

	$form['selectdatasets'] = 	[
								'#type' => 'markup',
								'#markup' => $extrahtml,
							];

	$form['submit'] = 		[
								'#type' => 'submit',
								'#value' => t('Submit'),
							];	

	return $form;
}

function cambridge_dataset_form_apply_terms_validate($form, &$form_state) 
{
	// Validate 'apply' web form

	if (isset($form_state['storage']['page_two'])) 
	{
		$error_fields = [];
	
		if (!$form_state['values']['first']) 		{array_push($error_fields, 'first name'); form_set_error('first', '');}
		if (!$form_state['values']['last'])			{array_push($error_fields, 'last name'); form_set_error('last', '');}
		if (!valid_email_address($form_state['values']['email']))	{array_push($error_fields, 'valid email address'); form_set_error('email', '');}
		if (!$form_state['values']['position'])		{array_push($error_fields, 'academic position'); form_set_error('position', '');}
		if (!$form_state['values']['institution'])	{array_push($error_fields, 'institution'); form_set_error('institution', '');}
		if (!$form_state['values']['department'])	{array_push($error_fields, 'department'); form_set_error('department', '');}
		if (!$form_state['values']['address'])		{array_push($error_fields, 'address'); form_set_error('address', '');}
		if (!$form_state['values']['region'])		{array_push($error_fields, 'region'); form_set_error('region', '');}
		if (!$form_state['values']['postcode'])		{array_push($error_fields, 'postcode'); form_set_error('postcode', '');}
		if (!$form_state['values']['proposal'])		{array_push($error_fields, 'proposal'); form_set_error('proposal', '');}
		if (!$form_state['values']['datasets']) 	{array_push($error_fields, 'datasets'); form_set_error('dummygroup', '');}

		if (sizeof($error_fields) != 0) form_set_error('', 'Please enter or select your '.implode($error_fields, ', '));

		return;
	}

	if ($form_state['values']['agree']['agree'] !== 'agree')
	{
		form_set_error('agree', t('You must agree to the terms and conditions before you can make an application', []));
	}
}

function cambridge_dataset_form_apply_terms_submit($form, &$form_state) 
{
	// Process content of 'apply' web form that contains user's application

	if ($form_state['clicked_button']['#id'] == 'edit-next') 
	{
		$form_state['storage']['page_two'] = TRUE; 
		$form_state['storage']['page_one_values'] = $form_state['values'];
		$form_state["rebuild"] = TRUE;   
	}
	else 
	{
		$collection_nid 	= $form_state['storage']['nodeid'];	
		$field_first 		= cambridge_dataset_trim_text($form_state['values']['first']);
		$field_last 		= cambridge_dataset_trim_text($form_state['values']['last']);
		$field_email 		= cambridge_dataset_trim_text($form_state['values']['email']);
		$field_position 	= cambridge_dataset_trim_text($form_state['values']['position']);
		$field_institution 	= cambridge_dataset_trim_text($form_state['values']['institution']);
		$field_department 	= cambridge_dataset_trim_text($form_state['values']['department']);
		$field_address 		= trim($form_state['values']['address']);
		$field_region 		= cambridge_dataset_trim_text($form_state['values']['region']);
		$field_postcode 	= cambridge_dataset_trim_text($form_state['values']['postcode']);
		$field_country		= cambridge_dataset_trim_text($form_state['values']['country']);
		$field_proposal 	= trim($form_state['values']['proposal']);
		$field_datasets 	= trim($form_state['values']['datasets']);
		unset ($form_state['storage']); 

		// Save data in case anything goes wrong with creating object in Drupal

		$datastore_application_folder_path = rtrim(variable_get('cambridge_dataset_datastore_path', ""), '/')."/applications";
		file_prepare_directory($datastore_application_folder_path, FILE_CREATE_DIRECTORY);

		$datastore_legacy_array = [];
		$datastore_legacy_array['firstname'] = $field_first;
		$datastore_legacy_array['lastname'] = $field_last;
		$datastore_legacy_array['email'] = $field_email;
		$datastore_legacy_array['academicpos'] = $field_position;
		$datastore_legacy_array['institution'] = $field_institution;
		$datastore_legacy_array['department'] = $field_department;
		$datastore_legacy_array['street'] = $field_address;
		$datastore_legacy_array['city'] = $field_region;
		$datastore_legacy_array['postcode'] = $field_postcode;
		$datastore_legacy_array['country'] = $field_country;
		$datastore_legacy_array['proposal'] = $field_proposal;
		$datastore_legacy_array['requested_data'] = $field_datasets;

		$json = json_encode($datastore_legacy_array);
		$datastore_application_file_name = $field_first.'_'.'@£$%^^   *(&^%$£'.$field_last.'_'.date("F_j_Y_g_i_a").'.json';
		$datastore_application_file_name = preg_replace('/[^A-Za-z_0-9\.\:]/', '', $datastore_application_file_name); // remove weird characters
		$datastore_application_file_name = preg_replace('/[\s]/', '', $datastore_application_file_name); // remove spaces
		$datastore_application_file_path = $datastore_application_folder_path.'/'.$datastore_application_file_name;

		file_put_contents($datastore_application_file_path , $json);

		// Set up basic application

		$application_node = new stdClass();
		$application_node->title = "Application from ".substr("$field_first $field_last", 0, 100)." [".date("Y-m-d H:i:s")."]";
		$application_node->type = "application";
		$application_node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
		$application_node->uid = $GLOBALS["user"]->uid; 
		$application_node->field_collection[LANGUAGE_NONE][]['target_id'] 		= $collection_nid;
		$application_node->field_user_firstname[LANGUAGE_NONE][0]['value'] 		= $field_first;
		$application_node->field_user_lastname[LANGUAGE_NONE][0]['value'] 		= $field_last;
		$application_node->field_user_email[LANGUAGE_NONE][0]['value'] 			= $field_email;
		$application_node->field_user_position[LANGUAGE_NONE][0]['value'] 		= $field_position;
		$application_node->field_user_institution[LANGUAGE_NONE][0]['value'] 	= $field_institution;
		$application_node->field_user_department[LANGUAGE_NONE][0]['value'] 	= $field_department;
		$application_node->field_user_address[LANGUAGE_NONE][0]['value'] 		= $field_address;
		$application_node->field_user_region[LANGUAGE_NONE][0]['value'] 		= $field_region;
		$application_node->field_user_postcode[LANGUAGE_NONE][0]['value'] 		= $field_postcode;
		$application_node->field_user_country[LANGUAGE_NONE][0]['value'] 		= $field_country;
		$application_node->field_user_proposal[LANGUAGE_NONE][0]['value'] 		= $field_proposal;
	
		// Add reviewers for particular collection of datasets

		$collection_node = node_load($collection_nid);
		$application_node->field_reviewers[LANGUAGE_NONE] = $collection_node->field_reviewers[LANGUAGE_NONE];

		$reviewers_nids = [];
		foreach($collection_node->field_reviewers[LANGUAGE_NONE] as $key => $value)
		{
			$field_collection_node = entity_load('field_collection_item', array($value['value']));
			$field_collection_node = array_shift($field_collection_node);
			array_push($reviewers_nids, $field_collection_node->field_reviewer[LANGUAGE_NONE][0]['target_id']);
		}

		cambridge_dataset_notifyreviewers($reviewers_nids);

		// Add selected datasets to application

		$selecteddatasets_dupe_array = explode(",", $field_datasets);
		$selecteddatasets_array = [];
		for($i = 0; $i < sizeof($selecteddatasets_dupe_array); $i += 2) array_push($selecteddatasets_array, $selecteddatasets_dupe_array[$i]);

		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node');
		$query->entityCondition('bundle', 'dataset');
		$query->fieldCondition('field_collection', 'target_id', $collection_nid, '=');
		$result = $query->execute();
		if (isset($result['node'])) 
		{
			$datasets_nids = array_keys($result['node']);
			$datasets = entity_load('node', $datasets_nids);

			foreach($datasets as $key => $value) 
			{
				if (in_array($value->field_code[LANGUAGE_NONE][0]['value'], $selecteddatasets_array))
				{
					$field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_datasets')); 
					$field_collection_item->setHostEntity('node', $application_node); 
					$field_collection_item->field_dataset[LANGUAGE_NONE][0]['target_id'] = $value->nid; 
					$field_collection_item->save(TRUE); 
				}
			}
		}

		// Save node

		node_save($application_node); 	
	
		drupal_set_message('Your application has been sent!');
		$form_state['redirect'] = 'cambridge_dataset'; // Redirects the user.

	}
}

//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  End Form builder, validate, and submit functions for apply form
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|


//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  Form builder, validate, and submit functions for import form
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|

function cambridge_dataset_form_import() 
{
	// Create 'import' form
	
	$form['#attributes'] = 	['enctype' => 'multipart/form-data'];
	$form['collection'] = 	[ 
								'#title' => t('<h3>Collection title</h3>'),
								'#type'  => 'textfield',
							];	
	$form['csvfile'] = 		[ 
								'#title' => t('<h3>CSV file</h3>'),
								'#type'  => 'file',
								'#description' => ($max_size = parse_size(ini_get('upload_max_filesize'))) ? t('Due to server restrictions, the <strong>maximum upload file size is !max_size</strong>. Files that exceed this size will be disregarded.', ['!max_size' => format_size($max_size)]) : '',    
							];	
	$form['submit'] = 		[
								'#type' => 'submit',
								'#value' => t('Import >>'),
							];	
	$form['#validate'] = 	[
								'cambridge_dataset_form_import_fileupload_validate',
								'cambridge_dataset_form_import_file_validate',
							];
	
	return $form ;
}

function cambridge_dataset_form_import_fileupload_validate(&$form, &$form_state) 
{
	// Validate whether general upload has worked
	
	$validators = ['file_validate_extensions' => ['csv']];

	if ( $file = file_save_upload('csvfile', $validators, "public://", FILE_EXISTS_REPLACE) ) 
	{
		$form_state['values']['csvupload'] = $file->destination;       
	}
	else 
	{
		form_set_error('cambridge_dataset', t('Unable to copy upload file to !dest', array('!dest' => $destination)));
	}      
}


function cambridge_dataset_form_import_file_validate(&$form, &$form_state) 
{
	// Validate content of upload
	
	if (isset($form_state['values']['csvupload'])) 
	{
		if ($handle = fopen($form_state['values']['csvupload'], 'r')) 
		{
			fclose($handle);
		}
		else 
		{
			form_set_error('csvfile', t('Unable to read uploaded file !filepath', ['!filepath' => $form_state['values']['csvupload']]));
		}
	}
}

function cambridge_dataset_form_import_submit(&$form, &$form_state) 
{
	// Process content of actual upload
	
	$batch = 	[
					'title' => t('Importing CSV ...'),
					'operations' => [],
					'init_message' => t('Commencing'),
					'progress_message' => t('Processed @current out of @total.'),
					'error_message' => t('An error occurred during processing'),
					'finished' => 'cambridge_dataset_import_finished',
				];

	if (isset( $form_state['values']['csvupload'])) 
	{
		if ($handle = fopen($form_state['values']['csvupload'], 'r')) 
		{
			$batch['operations'][] = array('_cambridge_dataset_import_remember_filename', array($form_state['values']['csvupload'])) ;

			$line_count = 1 ;

			// Create master 'collection' record to hold all datasets

			$batch['operations'][] = array('_cambridge_dataset_import_create_master_collection', array($form_state['values']['collection'])) ;					
 
			while ($line = fgetcsv($handle, 4096)) 
			{    	
				// Iterate through every line of upload
				
				if ($line_count == 1)
				{
					// Initialize import

					$batch['operations'][] = array('_cambridge_dataset_import_init', array(array_map('base64_encode', $line))) ;					
				}

				// Check to see whether we have valid data in line
					
				$line_concatenated = implode("", $line);
				$line_concatenated = trim(preg_replace('/[^A-Z0-9]/i', "", $line_concatenated));

				if ($line_concatenated != "")
				{
					// Batch import all lines as 'dataset' records
					
					$batch['operations'][] = array('_cambridge_dataset_import_processline', array(array_map('base64_encode', $line)));       					
				}				
				
				// Increment line count
				
				$line_count++;					
			}
			fclose($handle);	
		}
	} 
	
	batch_set($batch);	
}

//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  End Form builder, validate, and submit functions for import form
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|


//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  Batch API helpers
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|

function _cambridge_dataset_import_remember_filename($filename, &$context) 
{
	// Store upload filename
	
	$context['results']['uploaded_filename'] = $filename;
}

function _cambridge_dataset_import_create_master_collection($collection_name, &$context)
{
	// Create master 'collection' object

	$sCollectionTitle = 'Collection';						
	
	$node = new stdClass();
	$node->title = $collection_name;
	$node->type = "collection";
	$node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
	$node->uid = $GLOBALS["user"]->uid; 

	node_save($node);

	$context['results']['master_collection_nid'] = $node->nid;
}

function _cambridge_dataset_import_init($line, &$context)
{
	// Initialize import variables

    $line = $cleaned_line = array_map('base64_decode', $line);

	$context['results']['rows_imported'] = 0;
}
							
function _cambridge_dataset_import_processline($line, &$context) 
{
	// Import each line into dataset system

	set_time_limit(30);
	
    $context['results']['rows_imported']++;
    $line = $cleaned_line = array_map('base64_decode', $line);

	//-------------------------------------------------------------------------------------------|
    //  Give feedback to the importer about which operation we're preforming
    //-------------------------------------------------------------------------------------------|

	$context['message'] = t('Importing row !c', array( '!c' => $context['results']['rows_imported'] ));
	  						
    //-------------------------------------------------------------------------------------------|
    //  Convert line of the CSV file into new 'dataset' object.
    //-------------------------------------------------------------------------------------------|

	$dataset_node = new stdClass();
	$dataset_node->title = $line[1];
	$dataset_node->type = "dataset";
	$dataset_node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
	$dataset_node->uid = $GLOBALS["user"]->uid; 
	$dataset_node->field_code[LANGUAGE_NONE][0]['value'] 		= $line[0];
	$dataset_node->field_location[LANGUAGE_NONE][0]['value'] 	= $line[2];

	// Set master 'collection' under which all datasets are grouped 
	
	$dataset_node->field_collection[$dataset_node->language][]['target_id'] = $context['results']['master_collection_nid'];
						
	node_save($dataset_node); 	
		
	if ( $line[1] == 'ROW' && $line[2] == 'FAILS' ) 
	{
		$context['results']['failed_rows'][] = $line ;
	}
}

function cambridge_dataset_import_finished($success, $results, $operations) 
{
	// Called once import finished
	  	  
    if (!empty($results['failed_rows'])) 
	{
		$dir  = file_directory_path() . '/cambridge_dataset/' ;
		if (file_check_directory($dir, FILE_CREATE_DIRECTORY)) 
		{
			$csv_filename 	= 'failed_rows-'. basename($results['uploaded_filename']); // we validated extension on upload
			$csv_filepath 	= $dir .'/'. $csv_filename;
			$targs 			= 	[
									'!csv_url' => l(check_plain($csv_filename), $csv_filepath),
									'%csv_filename' => $csv_filename,
									'%csv_filepath' => $csv_filepath
								];
			
			if ($handle = fopen($csv_filepath, 'w+')) 
			{
				foreach($results['failed_rows'] as $failed_row) 
				{
					fputcsv($handle, $failed_row);
				}
				fclose($handle);
				drupal_set_message(t('Some rows failed to import. You may download a CSV of these rows: !csv_url', $targs), 'error');
			}
			else 
			{
				drupal_set_message(t('Some rows failed to import, but unable to write error CSV to %csv_filepath', $targs), 'error');
			}
		}
		else 
		{
			drupal_set_message(t('Some rows failed to import, but unable to create directory for error CSV at %csv_directory', $targs), 'error');
		}
	}
	else
	{
		drupal_set_message("Import of ".basename($results['uploaded_filename'])." complete");
	}
	
	return t('The CSV import has completed.');
}
  
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|
//  End batch API helpers
//-------------------------------------------------------------------------------------------|
//-------------------------------------------------------------------------------------------|

